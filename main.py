import asyncio
import logging
import sys
import os
from datetime import datetime, timedelta

from config import bot_token, delta_time  # delta_time - –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ OpenAI
from message_processing import gpt_response_creation


from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold



dp = Dispatcher()

# –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI
queue = tuple()
# –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
num = 1

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!\n–Ø –Ω–∞—É—á—É —Ç–µ–±—è –±–∞–∑–∞—Ä–∏—Ç—å —Å –ø–∏–Ω–¥–æ—Å–∞–º–∏")


@dp.message()
async def lame_message_handler(message: types.Message) -> None:

    global num, queue, last_use_time

    # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_message = message.text
    user_id = message.chat.id

    try:
        # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏—Ç–æ—Ä–∏–µ–π –æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
        messages_file = str(os.path.join(dialogues_folder, f'{user_id}.txt'))

        # –µ—Å–ª–∏ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        try:
            with open(messages_file, 'x', encoding='utf-8'):
                pass
        except Exception as e:
            if '[Errno 17] File exists: ' not in str(e):
                print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–æ–≥—Ä–∞–º–º—ã 1 (–æ—à–∏–±–∫—É –≤—ã–∑–≤–∞–ª –ø–µ—Ç—É—Ö –Ω–∞ {user_id})')

        # –¥–æ—Å—Ç–∞–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        last_messages = list()
        try:
            with open(messages_file, encoding='utf-8') as f:
                last_10_messages = f.readlines()[-20:]
            for pos in range(0, len(last_10_messages), 2):
                last_messages += [{'role': last_10_messages[pos].strip(), 'content': last_10_messages[pos + 1].strip()}]
        except Exception as e:
            if '[Errno 17] File exists: ' not in str(e):
                print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–æ–≥—Ä–∞–º–º—ã 2 (–æ—à–∏–±–∫—É –≤—ã–∑–≤–∞–ª –ø–µ—Ç—É—Ö –Ω–∞ {user_id})')
        # –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–µ—Ç—É—à–∞—Ä—ã
        last_messages = (last_messages + [{'role': 'user', 'content': user_message}])[-20:]

        # –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        pos, num = num, num + 1
        queue += (pos,)
        try:
            await message.answer('Please wait . . .')

            # –æ–∂–∏–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
            while queue.index(pos) != 0 or last_use_time + timedelta(seconds=delta_time) > datetime.utcnow():
                await asyncio.sleep(1)
            # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            bot_answer = await gpt_response_creation(last_messages)

            # –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            with open(messages_file, 'a', encoding='utf-8') as f:
                print('user', user_message.replace('\n', '\t'), sep='\n', file=f)
                print('assistant', bot_answer.replace('\n', '\t'), sep='\n', file=f)

            # –æ—Ç–≤–µ—á–∞–µ–º —ç—Ç–æ–º—É –ø–∏–¥—Ä–∏–ª–ª–µ
            await message.reply(f'ü§ñ > {bot_answer}')

            # –ø—Ä–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–ø—É—â–µ–Ω–∏—è
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ {e} ! (–æ—à–∏–±–∫—É –≤—ã–∑–≤–∞–ª –ø–µ—Ç—É—Ö –Ω–∞ {user_id}')
        finally:
            # –¥–≤–∏–≥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            queue, last_use_time = queue[1:], datetime.utcnow()
    except Exception as e:
        print(f"—Ç–≤–∞—Ä—å –Ω–∞ {message.from_user.id} / {message.from_user.full_name} —á–µ —Ç–æ —Å–ª–æ–º–∞–ª–∞")


async def main() -> None:
    bot = Bot(bot_token, parse_mode=ParseMode.HTML)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)

    # —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
    if not os.path.isdir("dialogues"):
        os.mkdir("dialogues")
    program_dir = os.path.dirname(__file__)
    dialogues_folder = os.path.join(program_dir, "dialogues")

    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥–∏, —á—Ç–æ–± –ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞—Ç—å, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    last_use_time = datetime.utcnow()

    asyncio.run(main())
